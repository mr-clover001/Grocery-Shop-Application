{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nlet UserRegisterComponent = class UserRegisterComponent {\n  constructor(authService) {\n    this.authService = authService;\n    this.repeatPass = 'none';\n    this.displayMsg = \"\";\n    this.IsAccountCreated = false;\n    this.registerForm = new FormGroup({\n      firstname: new FormControl(\"\", [Validators.required, Validators.minLength(2), Validators.pattern(\"[a-zA-Z].*\")]),\n      lastname: new FormControl(\"\", [Validators.minLength(2), Validators.pattern(\"[a-zA-Z].*\")]),\n      email: new FormControl(\"\", [Validators.required, Validators.email]),\n      mobile: new FormControl(\"\", [Validators.required, Validators.maxLength(10), Validators.minLength(10), Validators.pattern(\"[0-9]*\")]),\n      role: new FormControl(\"\", [Validators.required]),\n      password: new FormControl(\"\", [Validators.required, Validators.maxLength(15), Validators.minLength(6)]),\n      rpwd: new FormControl(\"\")\n    });\n  }\n  ngonInit() {}\n  get FirstName() {\n    return this.registerForm.get(\"firstname\");\n  }\n  get LastName() {\n    return this.registerForm.get(\"lastname\");\n  }\n  get Email() {\n    return this.registerForm.get(\"email\");\n  }\n  get Mobile() {\n    return this.registerForm.get(\"mobile\");\n  }\n  get Role() {\n    return this.registerForm.get(\"role\");\n  }\n  get Password() {\n    return this.registerForm.get(\"password\");\n  }\n  get RepeatPwd() {\n    return this.registerForm.get(\"rpwd\");\n  }\n  registerSubmitted() {\n    if (this.Password.value == this.RepeatPwd.value) {\n      console.log(this.registerForm.valid);\n      this.repeatPass = \"none\";\n      this.authService.registerUser([this.registerForm.value.firstname, this.registerForm.value.lastname, this.registerForm.value.email, this.registerForm.value.mobile, this.registerForm.value.role, this.registerForm.value.password]).subscribe(res => {\n        if (res == 'Success') {\n          this.displayMsg = \"Account Created Successfully\";\n          this.IsAccountCreated = true;\n          this.registerForm.reset({});\n        } else if (res == 'Already Exist') {\n          this.displayMsg = \"Email already exists, TryAnother Email\";\n          this.IsAccountCreated = false;\n        } else {\n          this.displayMsg = 'Something went wrong';\n          this.IsAccountCreated = false;\n        }\n        console.log(res);\n      });\n    } else {\n      this.repeatPass = 'inline';\n    }\n  }\n  closeAlert() {\n    this.IsAccountCreated = false;\n  }\n};\nUserRegisterComponent = __decorate([Component({\n  selector: 'app-user-register',\n  templateUrl: './user-register.component.html',\n  styleUrls: ['./user-register.component.css']\n})], UserRegisterComponent);\nexport { UserRegisterComponent };","map":{"version":3,"names":["Component","FormControl","FormGroup","Validators","UserRegisterComponent","constructor","authService","repeatPass","displayMsg","IsAccountCreated","registerForm","firstname","required","minLength","pattern","lastname","email","mobile","maxLength","role","password","rpwd","ngonInit","FirstName","get","LastName","Email","Mobile","Role","Password","RepeatPwd","registerSubmitted","value","console","log","valid","registerUser","subscribe","res","reset","closeAlert","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\anoopkumar02\\Desktop\\Nagarro Assignment\\ExitProject Pratice\\PracticeProject2\\GroceryShopFrontend\\src\\app\\Component\\user-register\\user-register.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {FormControl, FormGroup , Validators} from '@angular/forms';\nimport { AuthService } from '../Services/auth.service';\n\n@Component({\n  selector: 'app-user-register',\n  templateUrl: './user-register.component.html',\n  styleUrls: ['./user-register.component.css']\n})\nexport class UserRegisterComponent {\n\n  repeatPass : string = 'none';\n  displayMsg:string=\"\";\n  IsAccountCreated:boolean= false;\n\n  constructor(private authService: AuthService){}\n\n  ngonInit():void {}\n\n  registerForm = new FormGroup({\n    firstname: new FormControl(\"\",\n    [Validators.required,\n      Validators.minLength(2),\n      Validators.pattern(\"[a-zA-Z].*\")\n    ]),\n\n    lastname: new FormControl(\"\",\n    [\n      Validators.minLength(2),\n      Validators.pattern(\"[a-zA-Z].*\")\n    ]),\n\n    email: new FormControl(\"\",\n    [Validators.required,\n      Validators.email\n    ]),\n\n    mobile: new FormControl(\"\",\n    [Validators.required,\n      Validators.maxLength(10),\n      Validators.minLength(10),\n      Validators.pattern(\"[0-9]*\")]),\n\n    role: new FormControl(\"\",\n    [Validators.required]),\n\n    password: new FormControl(\"\",\n    [Validators.required,\n      Validators.maxLength(15),\n      Validators.minLength(6)\n    ]),\n\n    rpwd: new FormControl(\"\")\n\n  });\n\n  get FirstName(): FormControl{\n    return this.registerForm.get(\"firstname\") as FormControl;\n  }\n\n  get LastName(): FormControl{\n    return this.registerForm.get(\"lastname\") as FormControl;\n  }\n\n  get Email(): FormControl{\n    return this.registerForm.get(\"email\") as FormControl;\n  }\n\n  get Mobile(): FormControl{\n    return this.registerForm.get(\"mobile\") as FormControl;\n  }\n\n  get Role(): FormControl{\n    return this.registerForm.get(\"role\") as FormControl;\n  }\n  \n  get Password(): FormControl{\n    return this.registerForm.get(\"password\") as FormControl;\n  }\n\n  get RepeatPwd(): FormControl{\n    return this.registerForm.get(\"rpwd\") as FormControl;\n  }\n  \n\n\n  registerSubmitted(){\n   \n    if(this.Password.value==this.RepeatPwd.value){\n      console.log(this.registerForm.valid);\n      this.repeatPass = \"none\";\n\n      this.authService.registerUser([\n        this.registerForm.value.firstname,\n        this.registerForm.value.lastname,\n        this.registerForm.value.email,\n        this.registerForm.value.mobile,\n        this.registerForm.value.role,\n        this.registerForm.value.password\n\n      ])\n      .subscribe((res)=>{\n        if(res == 'Success'){\n          \n          this.displayMsg = \"Account Created Successfully\";\n          this.IsAccountCreated = true;\n          this.registerForm.reset({});\n\n        }else if(res == 'Already Exist'){\n\n          this.displayMsg = \"Email already exists, TryAnother Email\";\n          this.IsAccountCreated = false;\n        }else{\n          this.displayMsg = 'Something went wrong';\n          this.IsAccountCreated=false;\n        }\n\n          console.log(res);\n         \n          \n      });\n    }\n    else{\n      this.repeatPass = 'inline';\n    }\n  }\n  \n\n\n  closeAlert(){\n    this.IsAccountCreated=false;\n  } \n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}