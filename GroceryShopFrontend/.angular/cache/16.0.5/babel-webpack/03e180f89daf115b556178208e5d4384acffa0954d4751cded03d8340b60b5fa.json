{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n});\nexport class LoginComponent {\n  constructor(loginAuth, router, head) {\n    this.loginAuth = loginAuth;\n    this.router = router;\n    this.head = head;\n    this.alert = false;\n    this.isUserValid = false;\n    this.loginForm = new FormGroup({\n      email: new FormControl(\"\", [Validators.required, Validators.email]),\n      password: new FormControl(\"\", [Validators.required, Validators.maxLength(15), Validators.minLength(6)])\n    });\n  }\n  get Email() {\n    return this.loginForm.get(\"email\");\n  }\n  get Password() {\n    return this.loginForm.get(\"password\");\n  }\n  loginSubmitted() {\n    this.loginAuth.LoginUser([this.loginForm.value.email, this.loginForm.value.password]).subscribe(res => {\n      if (res == 'Failure') {\n        this.isUserValid = false;\n        this.alert = true;\n      } else {\n        this.isUserValid = true;\n        alert(\"Login successFul\");\n        this.head.setToken(res);\n        this.router.navigateByUrl('/');\n      }\n    }, error => {\n      console.error(error);\n      this.isUserValid = false;\n      this.alert = true;\n    });\n  }\n  closeAlert() {\n    this.alert = false;\n    this.loginForm.reset();\n  }\n}","map":{"version":3,"names":["FormControl","FormGroup","Validators","selector","templateUrl","styleUrls","LoginComponent","constructor","loginAuth","router","head","alert","isUserValid","loginForm","email","required","password","maxLength","minLength","Email","get","Password","loginSubmitted","LoginUser","value","subscribe","res","setToken","navigateByUrl","error","console","closeAlert","reset"],"sources":["C:\\Users\\anoopkumar02\\Desktop\\Nagarro Assignment\\ExitProject Pratice\\PracticeProject2\\GroceryShopFrontend\\src\\app\\Component\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators} from '@angular/forms';\nimport { AuthService } from '../Services/auth.service';\nimport { Router } from '@angular/router';\n \n\nimport ({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent {\n  \n\n\nalert: boolean = false;\nisUserValid :boolean =false;\n\nconstructor(public loginAuth:AuthService,private router:Router,private head:HeaderComponent) {}\n\nloginForm = new FormGroup({\n \n  email: new FormControl(\"\",\n  [Validators.required,\n    Validators.email\n  ]),\n  password: new FormControl(\"\",\n    [Validators.required,\n      Validators.maxLength(15),\n      Validators.minLength(6)\n    ])  \n\n});\n\nget Email(): FormControl{\n  return this.loginForm.get(\"email\") as FormControl;\n}\n\nget Password(): FormControl{\n  return this.loginForm.get(\"password\") as FormControl;\n}\n\nloginSubmitted(){\n  this.loginAuth\n  .LoginUser(\n    [this.loginForm.value.email,\n    this.loginForm.value.password])\n    .subscribe(res =>{\n      if(res == 'Failure'){\n       \n        this.isUserValid = false;\n        this.alert = true;\n        \n      }else{\n        this.isUserValid = true;\n        alert(\"Login successFul\");\n       this.head.setToken(res);\n       \n        this.router.navigateByUrl('/');\n      }\n    }, \n     error => {\n     console.error(error);\n     this.isUserValid = false;\n     this.alert= true;\n     \n    }\n\n    );\n}\n\ncloseAlert(){\n  this.alert = false;\n  this.loginForm.reset();\n}\n\n}\n"],"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAO,gBAAgB;AAKlE,MAAM,CAAE;EACNC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB;CACpC,CAAC;AAEF,OAAM,MAAOC,cAAc;EAO3BC,YAAmBC,SAAqB,EAASC,MAAa,EAASC,IAAoB;IAAxE,KAAAF,SAAS,GAATA,SAAS;IAAqB,KAAAC,MAAM,GAANA,MAAM;IAAgB,KAAAC,IAAI,GAAJA,IAAI;IAH3E,KAAAC,KAAK,GAAY,KAAK;IACtB,KAAAC,WAAW,GAAW,KAAK;IAI3B,KAAAC,SAAS,GAAG,IAAIZ,SAAS,CAAC;MAExBa,KAAK,EAAE,IAAId,WAAW,CAAC,EAAE,EACzB,CAACE,UAAU,CAACa,QAAQ,EAClBb,UAAU,CAACY,KAAK,CACjB,CAAC;MACFE,QAAQ,EAAE,IAAIhB,WAAW,CAAC,EAAE,EAC1B,CAACE,UAAU,CAACa,QAAQ,EAClBb,UAAU,CAACe,SAAS,CAAC,EAAE,CAAC,EACxBf,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,CACxB;KAEJ,CAAC;EAd4F;EAgB9F,IAAIC,KAAKA,CAAA;IACP,OAAO,IAAI,CAACN,SAAS,CAACO,GAAG,CAAC,OAAO,CAAgB;EACnD;EAEA,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACR,SAAS,CAACO,GAAG,CAAC,UAAU,CAAgB;EACtD;EAEAE,cAAcA,CAAA;IACZ,IAAI,CAACd,SAAS,CACbe,SAAS,CACR,CAAC,IAAI,CAACV,SAAS,CAACW,KAAK,CAACV,KAAK,EAC3B,IAAI,CAACD,SAAS,CAACW,KAAK,CAACR,QAAQ,CAAC,CAAC,CAC9BS,SAAS,CAACC,GAAG,IAAG;MACf,IAAGA,GAAG,IAAI,SAAS,EAAC;QAElB,IAAI,CAACd,WAAW,GAAG,KAAK;QACxB,IAAI,CAACD,KAAK,GAAG,IAAI;OAElB,MAAI;QACH,IAAI,CAACC,WAAW,GAAG,IAAI;QACvBD,KAAK,CAAC,kBAAkB,CAAC;QAC1B,IAAI,CAACD,IAAI,CAACiB,QAAQ,CAACD,GAAG,CAAC;QAEtB,IAAI,CAACjB,MAAM,CAACmB,aAAa,CAAC,GAAG,CAAC;;IAElC,CAAC,EACAC,KAAK,IAAG;MACRC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB,IAAI,CAACjB,WAAW,GAAG,KAAK;MACxB,IAAI,CAACD,KAAK,GAAE,IAAI;IAEjB,CAAC,CAEA;EACL;EAEAoB,UAAUA,CAAA;IACR,IAAI,CAACpB,KAAK,GAAG,KAAK;IAClB,IAAI,CAACE,SAAS,CAACmB,KAAK,EAAE;EACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}